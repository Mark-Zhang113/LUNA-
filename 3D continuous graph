# -*- coding: utf-8 -*-
"""
Created on Mon Jul 19 11:40:11 2021

@author: zhangm
"""

import socket
import json
import time
import datetime
from pandas import DataFrame
from matplotlib.collections import PolyCollection
import matplotlib.pyplot as plt
import numpy as np
import random


tcp_ip = '10.10.1.133'
tcp_port = 50000

buffer_size = 1024

seg_len = [80, 82.6, 85.2, 87.8, 90.4, 93.0, 95.6, 98.2, 100.8, 103.4, 106.0, 108.6, 111.2, 113.8, 116.4, 119.0, 121.6, 124.2, 126.8, 129.4, 132.0, 134.6, 137.2, 139.8, 142.4, 145.0, 147.6, 150.2, 152.8, 155.4, 158.0, 160.6, 163.2, 165.8, 168.4, 171.0, 173.6, 176.2, 178.8, 181.4, 184.0, 186.6, 189.2, 191.8, 194.4, 197.0, 199.6, 202.2, 204.8, 207.4, 210.0, 212.6, 215.2, 217.8, 220.4, 223.0, 225.6, 228.2, 230.8, 233.4, 236.0, 238.6, 241.2, 243.8, 246.4, 249.0, 251.6, 254.2, 256.8, 259.4, 262.0, 264.6, 267.2, 269.8, 272.4, 275.0, 277.6, 280.2, 282.8, 285.4, 288.0, 290.6, 293.2, 295.8, 298.4, 301.0, 303.6, 306.2, 308.8, 311.4, 314.0, 316.6, 319.2, 321.8, 324.4, 327.0, 329.6, 332.2, 334.8, 337.4, 340.0, 342.6, 345.2, 347.8, 350.4, 353.0, 355.6, 358.2, 360.8, 363.4, 366.0, 368.6, 371.2, 373.8, 376.4, 379.0, 381.6, 384.2, 386.8, 389.4, 392.0, 394.6, 397.2, 399.8, 402.4, 405.0, 407.6, 410.2, 412.8, 415.4, 418.0, 420.6, 423.2, 425.8, 428.4, 431.0, 433.6, 436.2, 438.8, 441.4, 444.0, 446.6, 449.2, 451.8, 454.4, 457.0, 459.6, 462.2, 464.8, 467.4, 470.0, 472.6, 475.2, 477.8, 480.4, 483.0, 485.6, 488.2, 490.8, 493.4, 496.0, 498.6, 501.2, 503.8, 506.4, 509.0, 511.6, 514.2, 516.8, 519.4, 522.0, 524.6, 527.2, 529.8, 532.4, 535.0, 537.6, 540.2, 542.8, 545.4, 548.0, 550.6, 553.2, 555.8, 558.4, 561.0, 563.6, 566.2, 568.8, 571.4, 574.0, 576.6, 579.2, 581.8, 584.4, 587.0, 589.6, 592.2, 594.8, 597.4, 600.0, 602.6, 605.2, 607.8, 610.4, 613.0, 615.6, 618.2, 620.8, 623.4, 626.0, 628.6, 631.2, 633.8, 636.4, 639.0, 641.6, 644.2, 646.8, 649.4, 652.0, 654.6, 657.2, 659.8, 662.4, 665.0, 667.6, 670.2, 672.8, 675.4, 678.0, 680.6, 683.2, 685.8, 688.4, 691.0, 693.6, 696.2, 698.8, 701.4, 704.0, 706.6, 709.2, 711.8, 714.4, 717.0, 719.6, 722.2, 724.8, 727.4, 730.0, 732.6, 735.2, 737.8, 740.4, 743.0, 745.6, 748.2, 750.8, 753.4, 756.0, 758.6, 761.2, 763.8, 766.4, 769.0, 771.6, 774.2, 776.8, 779.4, 782.0, 784.6, 787.2, 789.8, 792.4, 795.0, 797.6, 800.2, 802.8, 805.4, 808.0, 810.6, 813.2, 815.8, 818.4, 821.0, 823.6, 826.2, 828.8, 831.4, 834.0, 836.6, 839.2, 841.8, 844.4, 847.0, 849.6, 852.2, 854.8, 857.4, 860.0, 862.6, 865.2, 867.8, 870.4, 873.0, 875.6, 878.2, 880.8, 883.4, 886.0, 888.6, 891.2, 893.8, 896.4, 899.0, 901.6, 904.2, 906.8, 909.4, 912.0, 914.6, 917.2, 919.8, 922.4, 925.0, 927.6, 930.2, 932.8, 935.4, 938.0, 940.6, 943.2, 945.8, 948.4, 951.0, 953.6, 956.2, 958.8, 961.4, 964.0, 966.6, 969.2, 971.8, 974.4, 977.0, 979.6, 982.2, 984.8, 987.4, 990.0, 992.6, 995.2, 997.8, 1000.4, 1003.0, 1005.6, 1008.2, 1010.8, 1013.4, 1016.0, 1018.6, 1021.2, 1023.8, 1026.4, 1029.0, 1031.6, 1034.2, 1036.8, 1039.4, 1042.0, 1044.6, 1047.2, 1049.8, 1052.4, 1055.0, 1057.6, 1060.2, 1062.8, 1065.4, 1068.0, 1070.6, 1073.2, 1075.8, 1078.4, 1081.0, 1083.6, 1086.2, 1088.8, 1091.4, 1094.0, 1096.6, 1099.2, 1101.8, 1104.4, 1107.0, 1109.6, 1112.2, 1114.8, 1117.4, 1120.0, 1122.6, 1125.2, 1127.8, 1130.4, 1133.0, 1135.6, 1138.2, 1140.8, 1143.4, 1146.0, 1148.6, 1151.2, 1153.8, 1156.4, 1159.0, 1161.6, 1164.2, 1166.8, 1169.4, 1172.0, 1174.6, 1177.2, 1179.8, 1182.4, 1185.0, 1187.6, 1190.2, 1192.8, 1195.4, 1198.0, 1200.6, 1203.2, 1205.8, 1208.4, 1211.0, 1213.6, 1216.2, 1218.8, 1221.4, 1224.0, 1226.6, 1229.2, 1231.8, 1234.4, 1237.0, 1239.6, 1242.2, 1244.8, 1247.4, 1250.0, 1252.6, 1255.2, 1257.8, 1260.4, 1263.0, 1265.6, 1268.2, 1270.8, 1273.4, 1276.0, 1278.6, 1281.2, 1283.8, 1286.4, 1289.0, 1291.6, 1294.2, 1296.8, 1299.4, 1302.0, 1304.6, 1307.2, 1309.8, 1312.4, 1315.0, 1317.6, 1320.2, 1322.8, 1325.4, 1328.0, 1330.6, 1333.2, 1335.8, 1338.4, 1341.0, 1343.6, 1346.2, 1348.8, 1351.4, 1354.0, 1356.6, 1359.2, 1361.8, 1364.4, 1367.0, 1369.6, 1372.2, 1374.8, 1377.4, 1380.0, 1382.6, 1385.2, 1387.8, 1390.4, 1393.0, 1395.6, 1398.2, 1400.8, 1403.4, 1406.0, 1408.6, 1411.2, 1413.8, 1416.4, 1419.0, 1421.6, 1424.2, 1426.8, 1429.4, 1432.0, 1434.6, 1437.2, 1439.8, 1442.4, 1445.0, 1447.6, 1450.2, 1452.8, 1455.4, 1458.0, 1460.6, 1463.2, 1465.8, 1468.4, 1471.0, 1473.6, 1476.2, 1478.8, 1481.4, 1484.0, 1486.6, 1489.2, 1491.8, 1494.4, 1497.0, 1499.6, 1502.2, 1504.8, 1507.4, 1510.0, 1512.6, 1515.2, 1517.8, 1520.4, 1523.0, 1525.6, 1528.2, 1530.8, 1533.4, 1536.0, 1538.6, 1541.2, 1543.8, 1546.4, 1549.0, 1551.6, 1554.2, 1556.8, 1559.4, 1562.0, 1564.6, 1567.2, 1569.8, 1572.4, 1575.0, 1577.6, 1580.2, 1582.8, 1585.4, 1588.0, 1590.6, 1593.2, 1595.8, 1598.4, 1601.0, 1603.6, 1606.2, 1608.8, 1611.4, 1614.0, 1616.6, 1619.2, 1621.8, 1624.4, 1627.0, 1629.6, 1632.2, 1634.8, 1637.4, 1640.0, 1642.6, 1645.2, 1647.8, 1650.4, 1653.0, 1655.6, 1658.2, 1660.8, 1663.4, 1666.0, 1668.6, 1671.2, 1673.8, 1676.4, 1679.0, 1681.6, 1684.2, 1686.8, 1689.4, 1692.0, 1694.6, 1697.2, 1699.8, 1702.4, 1705.0, 1707.6, 1710.2, 1712.8, 1715.4, 1718.0, 1720.6, 1723.2, 1725.8, 1728.4, 1731.0, 1733.6, 1736.2, 1738.8, 1741.4, 1744.0, 1746.6, 1749.2, 1751.8, 1754.4, 1757.0, 1759.6, 1762.2, 1764.8, 1767.4, 1770.0, 1772.6, 1775.2, 1777.8, 1780.4, 1783.0, 1785.6, 1788.2, 1790.8, 1793.4, 1796.0, 1798.6, 1801.2, 1803.8, 1806.4, 1809.0, 1811.6, 1814.2, 1816.8, 1819.4, 1822.0, 1824.6, 1827.2, 1829.8, 1832.4, 1835.0, 1837.6, 1840.2, 1842.8, 1845.4, 1848.0, 1850.6, 1853.2, 1855.8, 1858.4, 1861.0, 1863.6, 1866.2, 1868.8, 1871.4, 1874.0, 1876.6, 1879.2, 1881.8, 1884.4, 1887.0, 1889.6, 1892.2, 1894.8, 1897.4, 1900.0, 1902.6, 1905.2, 1907.8, 1910.4, 1913.0, 1915.6, 1918.2, 1920.8, 1923.4, 1926.0, 1928.6, 1931.2, 1933.8, 1936.4, 1939.0, 1941.6, 1944.2, 1946.8, 1949.4, 1952.0, 1954.6, 1957.2, 1959.8, 1962.4, 1965.0, 1967.6, 1970.2, 1972.8, 1975.4, 1978.0, 1980.6, 1983.2, 1985.8, 1988.4, 1991.0, 1993.6, 1996.2, 1998.8, 2001.4, 2004.0, 2006.6, 2009.2, 2011.8, 2014.4, 2017.0, 2019.6, 2022.2, 2024.8, 2027.4, 2030.0, 2032.6, 2035.2, 2037.8, 2040.4, 2043.0, 2045.6, 2048.2, 2050.8, 2053.4, 2056.0, 2058.6, 2061.2, 2063.8, 2066.4, 2069.0, 2071.6, 2074.2, 2076.8, 2079.4, 2082.0, 2084.6, 2087.2, 2089.8, 2092.4, 2095.0, 2097.6, 2100.2, 2102.8, 2105.4, 2108.0, 2110.6, 2113.2, 2115.8, 2118.4, 2121.0, 2123.6, 2126.2, 2128.8, 2131.4, 2134.0, 2136.6, 2139.2, 2141.8, 2144.4, 2147.0, 2149.6, 2152.2, 2154.8, 2157.4, 2160.0, 2162.6, 2165.2, 2167.8, 2170.4, 2173.0, 2175.6, 2178.2, 2180.8, 2183.4, 2186.0, 2188.6, 2191.2, 2193.8, 2196.4, 2199.0, 2201.6, 2204.2, 2206.8, 2209.4, 2212.0, 2214.6, 2217.2, 2219.8, 2222.4, 2225.0, 2227.6, 2230.2, 2232.8, 2235.4, 2238.0, 2240.6, 2243.2, 2245.8, 2248.4, 2251.0, 2253.6, 2256.2, 2258.8, 2261.4, 2264.0, 2266.6, 2269.2, 2271.8, 2274.4, 2277.0, 2279.6, 2282.2]
    
global verts
global ax
global xs
verts = []
ax = plt.figure().add_subplot(projection='3d')
zs = 0
xs = np.linspace(1, 2285, 848)


def polygon_under_graph(xlist, ylist):
    """
    Construct the vertex list which defines the polygon filling the space under
    the (xlist, ylist) line graph.  Assumes the xs are in ascending order.
    """
    return [(xlist[0], 0.), *zip(xlist, ylist), (xlist[-1], 0.)]

def gather_data(msg):
    global data 
    data = [str(x) for x in msg['data']]
    data = data[0:848]
    data = ['0' if i=='None' else i for i in data]
    #print(data)
    
    

def main(msg):
    pass


if __name__ == '__main__':
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((tcp_ip, tcp_port))
    buf = ''
    while True:
        # Get more data and add it to buffer
        buf += s.recv(buffer_size).decode('utf-8')
        # See if we have a complete null-terminated message
        i = buf.find('\0')
        
        if i > -1:
            time.sleep(1)
            # Split off message
            msg = buf[:i]     # Data before null
            buf = buf[i+1:]   # Data after null
            # Remove checksum (last 4 bytes of message)
            checksum = msg[-4:]
            # Parse JSON message (removing checksum and /r/n from end
            # of message)
            json_data = json.loads(msg[:-6])
            msg_type = json_data["message type"]
            if msg_type == "measurement":
                while True:
                    gather_data(json_data)
                    #plot(0)
                    zs+=1
                    print(data)
                    verts.append(polygon_under_graph(xs, data))
                    poly = PolyCollection(verts, facecolors=['r', 'g', 'b', 'y', 'c', 'm', 'k', 'w', 'orange', 'lawngreen'], alpha=.6)
                    ax.add_collection3d(poly, zs, zdir='y')
                    ax.set_title('test 1')
                    ax.set_xlabel('Length of strain in mm')
                    ax.set_ylabel('Number of measurements')
                    ax.set_zlabel('Strain value')
                    ax.set_xlim(75, 2285)
                    ax.set_ylim(0, 25)
                    ax.set_zlim(-1100, 1500)
                    plt.draw()
                    break




             

